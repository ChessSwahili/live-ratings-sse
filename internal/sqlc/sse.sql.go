// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sse.sql

package data

import (
	"context"
)

const checkEntriesDynamic = `-- name: CheckEntriesDynamic :one
SELECT COUNT(*) FROM dynamic
`

func (q *Queries) CheckEntriesDynamic(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEntriesDynamic)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const checkEntriesStatic = `-- name: CheckEntriesStatic :one
SELECT COUNT(*) FROM static
`

func (q *Queries) CheckEntriesStatic(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, checkEntriesStatic)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getallDynamic = `-- name: GetallDynamic :many
SELECT id,lichess_id,username,rapid FROM dynamic
`

type GetallDynamicRow struct {
	ID        int32  `json:"id"`
	LichessID string `json:"lichess_id"`
	Username  string `json:"username"`
	Rapid     int32  `json:"rapid"`
}

func (q *Queries) GetallDynamic(ctx context.Context) ([]GetallDynamicRow, error) {
	rows, err := q.db.QueryContext(ctx, getallDynamic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetallDynamicRow{}
	for rows.Next() {
		var i GetallDynamicRow
		if err := rows.Scan(
			&i.ID,
			&i.LichessID,
			&i.Username,
			&i.Rapid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getallStatic = `-- name: GetallStatic :many
SELECT id,lichess_id,username,rapid FROM static
`

type GetallStaticRow struct {
	ID        int32  `json:"id"`
	LichessID string `json:"lichess_id"`
	Username  string `json:"username"`
	Rapid     int32  `json:"rapid"`
}

func (q *Queries) GetallStatic(ctx context.Context) ([]GetallStaticRow, error) {
	rows, err := q.db.QueryContext(ctx, getallStatic)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetallStaticRow{}
	for rows.Next() {
		var i GetallStaticRow
		if err := rows.Scan(
			&i.ID,
			&i.LichessID,
			&i.Username,
			&i.Rapid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDynamic = `-- name: InsertDynamic :exec
INSERT INTO dynamic (lichess_id,username,rapid) VALUES ($1,$2,$3)
`

type InsertDynamicParams struct {
	LichessID string `json:"lichess_id"`
	Username  string `json:"username"`
	Rapid     int32  `json:"rapid"`
}

func (q *Queries) InsertDynamic(ctx context.Context, arg InsertDynamicParams) error {
	_, err := q.db.ExecContext(ctx, insertDynamic, arg.LichessID, arg.Username, arg.Rapid)
	return err
}

const insertStatic = `-- name: InsertStatic :exec
INSERT INTO static (lichess_id,username,rapid) VALUES ($1,$2,$3)
`

type InsertStaticParams struct {
	LichessID string `json:"lichess_id"`
	Username  string `json:"username"`
	Rapid     int32  `json:"rapid"`
}

func (q *Queries) InsertStatic(ctx context.Context, arg InsertStaticParams) error {
	_, err := q.db.ExecContext(ctx, insertStatic, arg.LichessID, arg.Username, arg.Rapid)
	return err
}

const updateDynamic = `-- name: UpdateDynamic :exec
UPDATE dynamic
SET rapid = $1, modified_at= NOW()
WHERE lichess_id = $2
`

type UpdateDynamicParams struct {
	Rapid     int32  `json:"rapid"`
	LichessID string `json:"lichess_id"`
}

func (q *Queries) UpdateDynamic(ctx context.Context, arg UpdateDynamicParams) error {
	_, err := q.db.ExecContext(ctx, updateDynamic, arg.Rapid, arg.LichessID)
	return err
}
